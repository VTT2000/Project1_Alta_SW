using LuckyDrawPromotion.Models;
using LuckyDrawPromotion.Services;
using Microsoft.AspNetCore.Mvc;
using OfficeOpenXml;

namespace LuckyDrawPromotion.Controllers
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class GiftsController : ControllerBase
    {
        private readonly IGiftService _giftService;
        public GiftsController(IGiftService giftService) { _giftService = giftService; }
        
        [HttpGet]
        public IActionResult GetAll()
        {
            return Ok(_giftService.GetGifts());
        }

        [HttpGet]
        public IActionResult GetFilterMethod()
        {
            List<CampaignDTO_FilterMethod> campaignDTO_FilterMethods = new List<CampaignDTO_FilterMethod>();
            campaignDTO_FilterMethods.Add(new CampaignDTO_FilterMethod(1, "Match all filters"));
            campaignDTO_FilterMethods.Add(new CampaignDTO_FilterMethod(2, "Match any filters"));
            return Ok(campaignDTO_FilterMethods);
        }
        [HttpGet]
        public IActionResult GetSearchCriteriaGift()
        {
            List<CampaignDTO_Condition> campaignDTO_Conditions = new List<CampaignDTO_Condition>();
            campaignDTO_Conditions.Add(new CampaignDTO_Condition(1, "includes"));
            campaignDTO_Conditions.Add(new CampaignDTO_Condition(2, "is not include"));

            List<CampaignDTO_Condition> campaignDTO_Conditions0 = new List<CampaignDTO_Condition>();
            campaignDTO_Conditions0.Add(new CampaignDTO_Condition(1, "more than"));
            campaignDTO_Conditions0.Add(new CampaignDTO_Condition(2, "less than"));
            campaignDTO_Conditions0.Add(new CampaignDTO_Condition(3, "exactly"));

            List<CampaignDTO_Condition> campaignDTO_Conditions1 = new List<CampaignDTO_Condition>();
            campaignDTO_Conditions1.Add(new CampaignDTO_Condition(1, "is"));
            campaignDTO_Conditions1.Add(new CampaignDTO_Condition(2, "is not"));

            List<CampaignDTO_SearchCriteria> campaignDTO_SearchCriterias = new List<CampaignDTO_SearchCriteria>();
            campaignDTO_SearchCriterias.Add(new CampaignDTO_SearchCriteria(1, "Gift Code", campaignDTO_Conditions));
            campaignDTO_SearchCriterias.Add(new CampaignDTO_SearchCriteria(2, "Gift Name", campaignDTO_Conditions));
            campaignDTO_SearchCriterias.Add(new CampaignDTO_SearchCriteria(3, "Created Date", campaignDTO_Conditions0));
            campaignDTO_SearchCriterias.Add(new CampaignDTO_SearchCriteria(4, "Code usage limit", campaignDTO_Conditions0));
            campaignDTO_SearchCriterias.Add(new CampaignDTO_SearchCriteria(5, "Activation status", campaignDTO_Conditions1));
            return Ok(campaignDTO_SearchCriterias);
        }

        [HttpPost]
        public IActionResult GetAllForFilter(int campaignId, int filterMethod, List<CampaignDTO_Request_ConditionSearch> listConditionSearches)
        {
            if (!_giftService.ExistCampaignId(campaignId)) { return BadRequest("CampaignId not exist"); }
            if (filterMethod <= 0 || filterMethod >= 3)
            {
                return BadRequest(new { message = "FilterMethod not empty" });
            }
            return Ok(_giftService.GetAllForSort(campaignId,filterMethod, listConditionSearches));
        }
        [HttpGet]
        public IActionResult GetCodeCount(int campaignId)
        {
            if (!_giftService.ExistCampaignId(campaignId)) { return BadRequest("CampaignId not exist"); }
            return Ok(_giftService.GetCodeCount(campaignId));
        }
        [HttpGet]
        public IActionResult GetCodeGiftCount(int campaignId)
        {
            if (!_giftService.ExistCampaignId(campaignId)) { return BadRequest("CampaignId not exist"); }
            return Ok(_giftService.GetCodeGiftCount(campaignId));
        }
        [HttpGet("{CampaignId}/{GiftId}/{GiftCodeCount}")]
        public IActionResult GetCreateTempGiftCode(int CampaignId, int GiftId, int GiftCodeCount)
        {
            if (!_giftService.ExistCampaignId(CampaignId)) { return BadRequest("CampaignId not exist"); }
            if (_giftService.GetCodeCount(CampaignId) - _giftService.GetCodeGiftCount(CampaignId) >= GiftCodeCount)
            {
                return Ok(_giftService.GetCreateTempGiftCode(CampaignId, GiftId, GiftCodeCount));
            }
            return BadRequest("CodeGiftCount doesnt match");
        }
        [HttpPost]
        public IActionResult AutoGeneratedGiftCode(int campaignId, List<CampaignGiftDTO_Request0> ListCampaignGifts)
        {
            if (!_giftService.ExistCampaignId(campaignId)) { return BadRequest("CampaignId not exist"); }
            int s = 0;
            ListCampaignGifts.ForEach(p => s += p.ListCodeGiftCampaigns.Count);
            if (_giftService.GetCodeCount(campaignId) - _giftService.GetCodeGiftCount(campaignId) >= s)
            {
                string kq = _giftService.generatedGiftCodeCampaign(campaignId, ListCampaignGifts);
                if (kq.Equals("true"))
                {
                    return Ok("Generated (amount of Gift Codes) Gift Codes successfully.");
                }
                else
                {
                    return BadRequest(kq);
                }
            }
            else
            {
                return BadRequest("CodeGiftCount doesnt match");
            }
        }
        [HttpPost]
        public IActionResult ExportToExcel(List<CodeGiftCampaignDTO_ResponseFilter> list)
        {
            if (list.Count == 0 || list == null)
            {
                return BadRequest("No data export");
            }
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            var stream = _giftService.ExportToExcel(list);
            stream.Position = 0;
            string excelName = "Gift_list.xlsx";
            return File(stream, "application/vnd.openxmlformat-officedocument.spredsheetml.sheet", excelName);
        }
    }
}
